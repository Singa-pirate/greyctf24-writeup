a = 12495068391856999800077002030530346154633251410701993364552383316643702466683773454456456597802923936206937481367758944533287430192110874917786936470363369
b = 8077707147198053886290544832343186898331956960638623080378558119874814319984246411074010515131637149736377313917292767376808884023937736055240325038442951
c = 10898848501176222929758568549735934974173617359760346224710269537956982757903808181573409877312658404512178685311838325609151823971632352375145906550988157

c1 = 11727185096615670493479944410151790761335959794363922757994065463882149941932060937572492050251349085994568934453243128190891922383731914525051578359318783
c2 = 2327979828535262192716931468063741561142276160684415064469817644730647222015445750643448615540518244828488228477943010970450757391003276726177736335376022
c3 = 4544692061471147250554940137677403449389851357903927336833646427737782533445020327768883285489907725322030741572216172954958842207101301502851102081477126

e = 65537

import gmpy2
from Crypto.Util.number import inverse, long_to_bytes
import math

A = 4*a + 2
B = 2*a + 2*b - 2*c + 1
C = - 2*b*c - c

delta = B ** 2 - 4 * A * C
delta_squared = gmpy2.isqrt(delta)
assert delta_squared ** 2 == delta

r = (-B + delta_squared) // (2 * A)
q = b // (2 * r + 1)
p = a // (2 * q + 1)
assert p * (2 * q + 1) == a
assert q * (2 * r + 1) == b
assert r * (2 * p + 1) == c

l1 = math.lcm(p - 1, 2 * q)
l2 = math.lcm(q - 1, 2 * r)
l3 = math.lcm(r - 1, 2 * p)

d1 = inverse(e, l1)
d2 = inverse(e, l2)
d3 = inverse(e, l3)

m1 = pow(c1, d1, a)
m2 = pow(c2, d2, b)
m3 = pow(c3, d3, c)
assert pow(m1, e, a) == c1
assert pow(m2, e, b) == c2
assert pow(m3, e, c) == c3

flag = long_to_bytes(m1) + long_to_bytes(m2) + long_to_bytes(m3)
print(flag)
